<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sdzy.mall.promotion.mapper.PromotionTypeDAO">
  <resultMap id="BaseResultMap" type="com.sdzy.mall.promotion.model.PromotionType">
    <id column="promotionTypeID" jdbcType="INTEGER" property="promotionTypeID" />
    <result column="promotinTypeName" jdbcType="VARCHAR" property="promotinTypeName" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="createDate" jdbcType="TIMESTAMP" property="createDate" />
    <result column="modifyDate" jdbcType="TIMESTAMP" property="modifyDate" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from promotionType
    where promotionTypeID = #{promotionTypeID,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.sdzy.mall.promotion.model.PromotionType">
    insert into promotionType (promotionTypeID, promotinTypeName, 
      status, createDate, modifyDate, 
      remark)
    values (#{promotionTypeID,jdbcType=INTEGER}, #{promotinTypeName,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, #{modifyDate,jdbcType=TIMESTAMP}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.sdzy.mall.promotion.model.PromotionType">
    update promotionType
    set promotinTypeName = #{promotinTypeName,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      createDate = #{createDate,jdbcType=TIMESTAMP},
      modifyDate = #{modifyDate,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR}
    where promotionTypeID = #{promotionTypeID,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select promotionTypeID, promotinTypeName, status, createDate, modifyDate, remark
    from promotionType
    where promotionTypeID = #{promotionTypeID,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select promotionTypeID, promotinTypeName, status, createDate, modifyDate, remark
    from promotionType
  </select>
  <update id="updateById" parameterType="java.util.Map">
     update  promotionType set  <foreach collection="updateList" item="item" separator=",">${item.key} = #{item.value}</foreach>where promotionTypeID = #{modelId}
  </update>
  <update id="updateByParam" parameterType="java.util.Map">
     update  promotionType set   <foreach collection="updateList" item="item" separator=",">${item.key} = #{item.value}</foreach> where 1=1  <foreach collection="whereList" item="item"> <choose>  <when test="item.opStr == 'in' ">  	and ${item.key} in   	<foreach collection="item.value" item="val" open="(" separator="," close=")">  	#{val}  	</foreach>   </when> <otherwise> and ${item.key} ${item.opStr} #{item.value} </otherwise> </choose> </foreach>
  </update>
  <delete id="deleteById" parameterType="String">
     delete from  promotionType where promotionTypeID = #{modelId}
  </delete>
  <delete id="deleteByParam" parameterType="java.util.Map">
     delete from   promotionType where 1=1  <foreach collection="whereList" item="item"> <choose>  <when test="item.opStr == 'in' ">  	and ${item.key} in   	<foreach collection="item.value" item="val" open="(" separator="," close=")">  	#{val}  	</foreach>   </when> <otherwise> and ${item.key} ${item.opStr} #{item.value} </otherwise> </choose> </foreach>
  </delete>
  <select id="findById" resultMap="BaseResultMap">
     select * from  promotionType where promotionTypeID = #{modelId}
  </select>
  <select id="listByPage" resultMap="BaseResultMap">
     select * from  promotionType where 1=1  <if test="whereList != null"> <foreach collection="whereList" item="item"> <choose>  <when test="item.opStr == 'in' ">  	and ${item.key} in   	<foreach collection="item.value" item="val" open="(" separator="," close=")">  	#{val}  	</foreach>   </when>   <when test="item.opStr == 'like'">      and ${item.key} ${item.opStr} CONCAT('%',#{item.value},'%')   </when>   <otherwise>      and ${item.key} ${item.opStr} #{item.value}   </otherwise>  </choose> </foreach> </if>
  </select>
  <select id="listByParam" resultMap="BaseResultMap">
     select * from  promotionType where 1=1  <if test="whereList != null"> <foreach collection="whereList" item="item"> <choose>  <when test="item.opStr == 'in' ">  	and ${item.key} in   	<foreach collection="item.value" item="val" open="(" separator="," close=")">  	#{val}  	</foreach>   </when>   <when test="item.opStr == 'like'">      and ${item.key} ${item.opStr} CONCAT('%',#{item.value},'%')   </when>   <otherwise>      and ${item.key} ${item.opStr} #{item.value}   </otherwise>  </choose> </foreach> </if>
  </select>
  <select id="findByParam" resultMap="BaseResultMap">
     select * from  promotionType where 1=1  <if test="whereList != null"> <foreach collection="whereList" item="item"> <choose>  <when test="item.opStr == 'in' ">  	and ${item.key} in   	<foreach collection="item.value" item="val" open="(" separator="," close=")">  	#{val}  	</foreach>   </when>   <when test="item.opStr == 'like'">      and ${item.key} ${item.opStr} CONCAT('%',#{item.value},'%')   </when>   <otherwise>      and ${item.key} ${item.opStr} #{item.value}   </otherwise>  </choose> </foreach> </if>
  </select>
</mapper>